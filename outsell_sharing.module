<?php

/**
 * @file
 * Code for the Outsell workflow content types feature.
 */

include_once 'outsell_sharing.features.inc';

/**
 * Implements hook_menu().
 */
function outsell_sharing_menu() {

  // Settings for sharing.
  $menu['admin/config/outsell/sharing'] = array(
    'title' => 'Sharing',
    'description' => 'Settings around content sharing.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('outsell_sharing_settings_form'),
    'file' => 'outsell_sharing.admin.inc',
    'file path' => drupal_get_path('module', 'outsell_sharing'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
  );

  // Sharing API upsert endpoint.
  $menu['outsell/sharing/api/share'] = array(
    'page callback' => 'outsell_sharing_api_upsert',
    'access callback' => 'outsell_sharing_api_auth',
    'file' => 'outsell_sharing.get.inc',
    'file path' => drupal_get_path('module', 'outsell_sharing'),
    'type' => MENU_CALLBACK,
  );

  // Sharing API delete endpoint.
  $menu['outsell/sharing/api/share/%'] = array(
    'page callback' => 'outsell_sharing_api_delete',
    'page arguments' => array(4),
    'access callback' => 'outsell_sharing_api_auth',
    'file' => 'outsell_sharing.get.inc',
    'file path' => drupal_get_path('module', 'outsell_sharing'),
    'type' => MENU_CALLBACK,
  );

  // Redirects for tethys legacy paths.
  $menu['d7entity/%'] = array(
    'page callback' => 'outsell_sharing_tethys_redirects',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );

  return $menu;
}

/**
 * Helper function to authorize api requests.
 */
function outsell_sharing_api_auth() {

  // Try to get the access key from $_SERVER.
  // @TODO: this might be nginx specific.
  $auth = $_SERVER['HTTP_AUTHORIZATION'];

  // Check whether this request is allowed or not.
  $allowed = ($auth === variable_get('outsell_sharing_apikey', ''));

  // If not allowed, watchdog and response code it.
  if (!$allowed) {

    // Make a message.
    $not_allowed_message = 'API request using key "@key" was denied. Mismatched key.';
    $not_allowed_message_options = array('@key' => $auth);
    watchdog('outsell_sharing', $not_allowed_message, $not_allowed_message_options, WATCHDOG_WARNING);

    // Set unauthorized code.
    http_response_code(401);

  }

  // Return access.
  return $allowed;

}

/**
 * Implements hook_permission().
 */
function outsell_sharing_permission() {
  return array(
    'access all segments' => array(
      'title' => t('Access all segments'),
    ),
    'access b2b segments' => array(
      'title' => t('Access all b2b segments'),
    ),
    'access cnf-grc segments' => array(
      'title' => t('Access all cnf/grc segments'),
    ),
    'access ent segments' => array(
      'title' => t('Access all ent segments'),
    ),
    'access library segments' => array(
      'title' => t('Access all library segments'),
    ),
    'access ltr-grc segments' => array(
      'title' => t('Access all ltr/grc segments'),
    ),
    'access stm segments' => array(
      'title' => t('Access all stm segments'),
    ),
    'access mm segments' => array(
      'title' => t('Access all marketing-media (mm) segments'),
    ),
  );
}

/**
 * Implements hook_segment_explorer_segments_preprocess().
 */
function outsell_sharing_segment_explorer_segments_preprocess($segments) {
  $mapping = variable_get('segment_mapping', array());

  foreach ($segments as $key => $row) {
    $access = FALSE;

    if (user_access('access all segments') == TRUE && in_array(strtolower($row['short_name']), $mapping['all'])) {
      $access = TRUE;
    }
    if (user_access('access b2b segments') == TRUE && in_array(strtolower($row['short_name']), $mapping['b2b'])) {
      $access = TRUE;
    }
    if (user_access('access cnf-grc segments') == TRUE && in_array(strtolower($row['short_name']), $mapping['c&f/grc'])) {
      $access = TRUE;
    }
    if (user_access('access ent segments') == TRUE && in_array(strtolower($row['short_name']), $mapping['e&t'])) {
      $access = TRUE;
    }
    if (user_access('access library segments') == TRUE && in_array(strtolower($row['short_name']), $mapping['liberty'])) {
      $access = TRUE;
    }
    if (user_access('access ltr-grc segments') == TRUE && in_array(strtolower($row['short_name']), $mapping['ltr/grc'])) {
      $access = TRUE;
    }
    if (user_access('access stm segments') == TRUE && in_array(strtolower($row['short_name']), $mapping['stm'])) {
      $access = TRUE;
    }
    if (user_access('access mm segments') == TRUE && in_array(strtolower($row['short_name']), $mapping['marketing&media'])) {
      $access = TRUE;
    }
    if ($access == FALSE) {
      unset($segments[$key]);
    }
  }

  return $segments;
}

/**
 * Menu callback outsell_sharing_tethys_redirects().
 *
 * Redirect users using lecacy URL structures to the corresponding Drupal nodes.
 *
 * @param string $tlid
 *   The tethys legacy id passed in as arg(1) from legacy URL structure.
 */
function outsell_sharing_tethys_redirects($tlid) {
  $sql = "select entity_id, field_tlid_value
    from field_data_field_tlid
    where field_tlid_value like '%" . db_like($tlid) . "%'
    limit 1";

  $result = db_query($sql);
  $tlid_num = '';
  foreach ($result as $r) {
    $tlid_num = $r->entity_id;
  }
  if ($tlid_num != '') {
    drupal_goto("node/$tlid_num", array(), '301');
  }
  else {
    drupal_goto('front');
  }
}
